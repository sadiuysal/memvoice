name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend testing
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: memvoice_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
        
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/memvoice_test" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        
    - name: Run backend tests
      run: |
        cd backend
        pytest --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend testing
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:coverage
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Backend linting and security
  backend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install quality tools
      run: |
        pip install black isort flake8 mypy bandit safety
        
    - name: Run black (formatting check)
      run: |
        cd backend
        black --check .
        
    - name: Run isort (import sorting check)
      run: |
        cd backend
        isort --check-only .
        
    - name: Run flake8 (linting)
      run: |
        cd backend
        flake8 .
        
    - name: Run mypy (type checking)
      run: |
        cd backend
        mypy .
        
    - name: Run bandit (security check)
      run: |
        cd backend
        bandit -r . -x tests/
        
    - name: Run safety (dependency security check)
      run: |
        cd backend
        safety check

  # Build validation
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Test backend Docker build
      run: |
        cd backend
        docker build -t memvoice-backend .

  # End-to-end tests (only on main branch or specific label)
  e2e-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'run-e2e')
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        
    - name: Start services
      run: |
        # Start backend in background
        cd backend && uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        # Start frontend in background
        cd frontend && npm run build && npm start &
        # Wait for services to be ready
        sleep 30
        
    - name: Run Playwright E2E tests
      run: |
        cd frontend
        npx playwright test
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/

  # Dependency vulnerability scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Check if all tests pass
  all-tests-pass:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, backend-quality, build-test]
    if: always()
    
    steps:
    - name: Check if all tests passed
      run: |
        if [[ "${{ needs.backend-test.result }}" == "success" && 
              "${{ needs.frontend-test.result }}" == "success" && 
              "${{ needs.backend-quality.result }}" == "success" && 
              "${{ needs.build-test.result }}" == "success" ]]; then
          echo "All tests passed!"
          exit 0
        else
          echo "Some tests failed!"
          exit 1
        fi 