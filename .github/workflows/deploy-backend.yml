name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        cd backend
        pytest
      env:
        TESTING: true
        DATABASE_URL: sqlite:///test.db
        
    - name: Run security checks
      run: |
        cd backend
        pip install bandit safety
        bandit -r . -x tests/
        safety check
        
    - name: Deploy to Railway
      uses: bervProject/railway-deploy@v1.0.7
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_ID }}
        
    - name: Update deployment status
      if: success()
      run: |
        echo "Backend deployed successfully to production"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "Backend deployment failed"
        exit 1

  # Database migration (if needed)
  migrate-database:
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: contains(github.event.head_commit.message, '[migrate]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run database migrations
      run: |
        cd backend
        alembic upgrade head
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Health check
      run: |
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
        echo "Health check passed"
        
    - name: API endpoint check
      run: |
        # Test main API endpoints
        curl -f ${{ secrets.BACKEND_URL }}/api/v1/status || exit 1
        echo "API endpoints accessible"
        
    - name: Performance check
      run: |
        # Basic performance check
        response_time=$(curl -o /dev/null -s -w "%{time_total}" ${{ secrets.BACKEND_URL }}/health)
        echo "Response time: ${response_time}s"
        
        # Fail if response time > 3 seconds
        if (( $(echo "$response_time > 3.0" | bc -l) )); then
          echo "Response time too slow: ${response_time}s"
          exit 1
        fi

  # Smoke tests
  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-backend, health-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install test dependencies
      run: |
        pip install requests pytest
        
    - name: Run smoke tests
      run: |
        python -m pytest tests/smoke/ -v
      env:
        API_BASE_URL: ${{ secrets.BACKEND_URL }}
        API_KEY: ${{ secrets.API_KEY }} 